Notes for benchmarking

Calculate change: 1 - (  /  )

=== benchmark from p11 to p11 + 100 million ===
30899/31213/31276 ms : Basic implementation
16690/16602/16832 ms : Added sieve in size 1,000,000 (~46% faster)
 7045/ 6964/ 7003 ms : Check for prime-numbered popcounts of candidate p2 before doing prime checks. (~58% faster)
 4850/ 4860/ 4834 ms : Bail if gcd(abs(#odd bits - #even bits), 1155) != 1 (~30% faster)
=== change benchmark from p11 + 100 million to p11 + 500 million ===
22163/22106/22096 ms : (no changes)
21862/21851/21819 ms : Only convert base 2 value to char array once (~1% faster)
20847/21207/21080 ms : Change toolset to VS2022 and C++20 (~3% faster)
20418/20573/21179 ms : Convert to char array allocation-free (~1.5% faster)
20059/19817/19721 ms : Use a static sieve for primes up to 17, then sieve up to 997 (~4% faster)
14296/14398/14492 ms : Only track odd numbers in sieves (~28% faster)
14152/13995/13988 ms : Bugfix: only provide div to MPIR for base 2 (~2% faster)
13778/13940/13639 ms : Only static sieve up to 13 (~2% faster)
13079/13055/13160 ms : Only use one mpz_class instance (~5% faster)
13000/12926/12900 ms : Rebuilt MPIR on C++20 (~1% faster)
12718/12550/12543 ms : Extend sieve from 997 to 1621 (~3% faster)
12345/12491/12347 ms : Use hardware popcount (~1.5% faster)
12326/12321/12348 ms : Change GCD lookup from vector to word (<1% faster)
 4924/ 4985/ 4938 ms : Div test bases 3-8 before any primality testing (~60% faster)
 4233/ 4313/ 4226 ms : Perform div tests without converting from base 2 (~14% faster)
=== change benchmark from p11 + 500 million to p11 + 5 billion ===
47091 ms : (no changes)
37193 ms : Use lookup table for div tests instead of modulo (~21% faster)
34075 ms : Iterate primes before bases in div tests (~8% faster)
33287 ms : Div test with 20 primes instead of 40 (~2% faster)
27977 ms : Build with AVX2 instruction set (~16% faster)
20810 ms : Make bitmask lookup constexpr (~26% faster)
20212 ms : Perform first div test remainder sums before inner loop (~3% faster)
17252 ms : Div test from 3; skip expensive tests (some are always false) (~15% faster)
16647 ms : Use custom prime test with trial division awareness (~3% faster)
14941 ms : Run one round of strong pseudoprime testing instead of 10 (~10% faster)
14288 ms : Skip div tests by 3 in bases 3-8 (always false) (~4% faster)
13743 ms : Skip div tests by 5 in bases 4-8, hardcode remaining test (~4% faster)
13279 ms : Skip div tests by 7 in bases 6-8, hardcode remaining tests (~3% faster)
12951 ms : Sort div tests by (prime * period of remainders) (~3% faster)
13635 ms : Fix critical sieving bug (~5% slower)
13445 ms : Cache offsets for sieving (~1.5% faster)
10986 ms : Overhaul datatypes and re-tune many knobs in config (~18% faster)
10384 ms : Skip six additional unused div tests (~5% faster)
10148 ms : Skip three div tests that are congruent with others (~2% faster)
 9810 ms : Use Profile-Guided Optimization (~3% faster)
 9398 ms : Cache sieve size during partial sieve (~4% faster)
 9063 ms : Replace second inner div test loop with jump table (~4% faster)
 8878 ms : Replace two branches with __assume intrinsics (~2% faster)
 8733 ms : Replace first inner div test loop with jump table (~1.5% faster)
 8621 ms : Evaluate hit counts when sorting div tests (see 12045d6) (~1.2% faster)
 7464 ms : Jump to the next set byte in the sieve (~13% faster)
 7304 ms : Simplify loop structure for jumping to next set byte (~2% faster)
 7089 ms : Use native types and pointers in incremental sieve (~3% faster)
 7057 ms : Use one popcount instead of two for GCD test (<1% faster)
 6438 ms : Gather candidates between sieving and main loop (~8% faster)
 6128 ms : Unroll "gather" loop by 8 (~5% faster)
 5562 ms : Gather candidates with prime popcounts in unrolled loop (~9% faster)
 5527 ms : Gather GCD candidates in unrolled loop (<1% faster)
 5493 ms : Use bt and cmov in prime popcount test (<1% faster)
 5289 ms : Skip re-marking multiples of 3 during sieving (~4% faster)
 4989 ms : Skip every 3rd and 5th entry when gathering sieve results (~6% faster)
 4970 ms : Filter which primes sieve in steps of 3 (<1% faster)
 4939 ms : Sieve smallest primes in steps of 15 (<1% faster)
 4906 ms : Copy static sieve using SIMD vectorized_copy (<1% faster)
 4871 ms : Don't inline the newer sieve function (<1% faster)
 3779 ms : Perf Wars: Episode III: Return of the SIMD (vectorize has_small_divisor) (~22% faster)
 3735 ms : Sort div tests only by cached hit counts (~1% faster)
 3576 ms : Load next set of div test remainders early (~4% faster)
 3442 ms : Separate first div test into a branchless pass (~4% faster)
 3313 ms : Separate div tests by 7 into two branchless passes (~4% faster)
 3273 ms : Skip every 7th entry when gathering sieve results (~1% faster)
 === change benchmark from p11 + 5 billion to p11 + 50 billion ===
29705 ms : (no changes)
28746 ms : Separate three more div tests into hardcoded branchless pass (~3% faster)
28429 ms : Make static_sieve constexpr and simplify copying it (~1% faster)
28182 ms : Hardcode div tests by 11 (~1% faster)
27870 ms : Load next prime and sieve offset one iteration early (~1% faster)
27616 ms : Combine four 4-remainder div tests (~1% faster)
27169 ms : Hardcode two more 6-remainder div tests (~1.6% faster)
26661 ms : Simplify block of 4-remainder div tests (~2% faster)
26592 ms : Simplify block of 6-remainder div tests (<1% faster)
25980 ms : Hardcode two more 3-remainder div tests (~2% faster)
25904 ms : Hardcode two 12-remainder div tests (<1% faster)
25557 ms : Accumulate results through multiple sieve passes (~1% faster)
25251 ms : Split dependency chain in prime_popcount_test (~1% faster)
24674 ms : Increase max div test remainders from 50 to 64 (~2% faster)
24062 ms : Generate div tests regardless of remainder period (~2% faster)
23861 ms : Split some div tests into branchless loops (~1% faster)
23641 ms : Eliminate conversion instruction in hot loops (~1% faster)
23333 ms : Vectorize three more hardcoded div tests (~1% faster)
23161 ms : Vectorize 6-remainder div tests (~1% faster)
22949 ms : Hardcode customized 16-remainder div tests (~1% faster)
22606 ms : Detect main loop iterations where upper 32 bits can't change (~1.5% faster)
22558 ms : Vectorize 4-rem div tests (<1% faster)
19755 ms : Filter by popcount while copying static sieve (~12% faster)
19026 ms : Add base 13 div tests (~4% faster)
18226 ms : Use nybble shuffle for 4-rem div tests (~4% faster)
17690 ms : Filter by GCD while copying static sieve (~3% faster)
17028 ms : Sieve against fewer small primes (~4% faster)
16719 ms : Order hardcoded div tests by elimination rate (~2% faster)
15703 ms : Vectorize gathering results from sieve (~6% faster)
15446 ms : Gather sieve results in parallel for any number of blocks (~1.5% faster)
15368 ms : Reduce SIMD register pressure in 4-rem div tests (<1% faster)
15258 ms : Save instructions during prime factor lookup (~1% faster)
14961 ms : Hardcode two more 4-rem div tests; reorder div tests (~2% faster)
14850 ms : Hardcode two more 8-rem div tests and reorder (~1% faster)
14597 ms : Don't handle edge cases when sieving (~2% faster)
14584 ms : Optimize merging bit pattern filters (<1% faster)
14439 ms : Optimize div tests with 6 rems (~1% faster)
13573 ms : Store sieve and masks as bits; adjust sieve constants (~6% faster)
13222 ms : Optimize branchless div tests (~3% faster)
13140 ms : Break dependency chains in b13m17 div test (<1% faster)
12745 ms : Break dependency chains and save uops in 4-rem div tests (~3% faster)
12546 ms : Break dependency chains and save uops in 6-rem div tests (~1.5% faster)
11963 ms : Break dependency chains in remaining div tests; reorder (~5% faster)
11891 ms : Save instrs in 6-rem tests; use pdep in 3-rem tests (<1% faster)
 === change benchmark from p11 + 50 billion to p11 + 150 billion ===
33528 ms : (no changes)
34488 ms : Restructure source files (~3% slower)
30979 ms : Use divisibility lookup for increments in hardcoded and branchless div tests (~10% faster)
30833 ms : Load ahead in 16-rem div tests (<1% faster)
30706 ms : Load ahead and save uops in div tests (<1% faster)
30654 ms : Save instructions in gather_bits_step (<1% faster)
27627 ms : Vectorize sieving from 19 through 79 (~10% faster)
27356 ms : Optimize div tests with 5 rems (~1% faster)
27050 ms : Handle 4 candidates and break dependency chains in branchless div tests (~1% faster)
26514 ms : Stop sieving when estimated density drops below threshold (~2% faster)
25882 ms : Vectorize bitset popcounts (~2% faster)
24677 ms : Gather candidates from sieve chunks sorted by popcount (~5% faster)
24290 ms : Unroll gather loop; store chunks and index separately (~1.6% faster)
24138 ms : Save instructions in inner sieve loop (<1% faster)
23901 ms : Use pdep in 5-rem div tests; reorder hardcoded div tests (~1% faster)
22756 ms : Unroll, bit-align, and constexpr-ify vectorized sieve loop (~5% faster)
22485 ms : Unroll and bit-align main sieve loop (~1% faster)
22319 ms : Only run vectorized sieving if sieve density is above 1% (<1% faster)
22281 ms : Tweak rounding calculation to prevent compiler from emitting idiv (<1% faster)
22182 ms : Optimize merging and popcounting bit pattern filters (<1% faster)
21095 ms : Add bit pattern filter for base 3 mod 5 div test (~5% faster)
20071 ms : Add bit pattern filter for base 4 mod 7 div test (~5% faster)
19988 ms : Decrease sieve density threshold to 3% (<1% faster)
19724 ms : Reorder hardcoded div tests (~1.3% faster)
19326 ms : Generate vectorized sieve writes for strides of 8*15*p (~2% faster)
18589 ms : Add bit pattern filter for base 3 mod 7 div test (~4% faster)
17559 ms : Add bit pattern filter for base 5 mod 7 div test (~6% faster)
17016 ms : Re-write 6-rem div tests (~3% faster)
15893 ms : Add bit pattern filter for two more 6-rem div tests (~7% faster)
15288 ms : Add bit pattern filter for three more 4-rem div tests (~4% faster)
14270 ms : Add bit pattern filters for 3-rem div tests; adjust sieve constants and alignment (~7% faster)
14131 ms : Add bit pattern filter for b13m17 div test (~1% faster)
13557 ms : Use primes up to 251 in trial division; don't pre-sort div tests (~4% faster)
13487 ms : Buffer candidates for full primality testing (<1% faster)
13437 ms : Split merge_bitmasks into two passes; prefetch lookups (<1% faster)
13148 ms : Split merge/sieve/gather loops; adjust sieve constants (~2% faster)
13058 ms : Save instructions in set_lookup_ptrs() (<1% faster)
12846 ms : Vectorize gathering bits from sieve (~1.6% faster)
 === change benchmark from p11 + 150 billion to p11 + 500 billion ===
40011 ms : (no changes)
39155 ms : Perform two tests in parallel in branching div tests (~2% faster)
39043 ms : Demote less frequently used cache lines in merge_bitmasks (<1% faster)
38758 ms : Simplify calculations in update_sieve_offsets_cache (<1% faster)
38317 ms : Align vectorized sieving for primes up to 47 (~1% faster)
38184 ms : Add bit masks for 5-rem div tests (<1% faster)
38117 ms : Prevent extra write instruction inside of hot copy/merge loop (<1% faster)
37074 ms : Pack non-zero sieve chunks before bitmap decoding (~3% faster)
36473 ms : Vectorize chunk packing (~1.6% faster)
36050 ms : Inline merge(), sieve(), gather() functions (~1.2% faster)
35593 ms : Use lookup table for chunk packing (~1.3% faster)
35563 ms : Unroll bitmap decoding for pc <= 2 (<1% faster)
35651 ms : Update to Windows 10, latest MSVC, and cpp-latest (<1% slower)
 === Port to Clang ===
	37781 ms : Initial Clang build
	37647 ms : Use PGO
	37500 ms : Prevent auto-vectorization in extract_candidates_with_popcount
	37168 ms : Enforce spilling sums to stack in branchless_div_tests
	35753 ms : Enforce spilling sums to stack across hardcoded div tests
	35448 ms : Use 32-bit sums in 4-rem div tests
	35181 ms : Use 32-bit sums in 10- and 12-rem div tests
35181 ms : Port to and optimize for Clang (~1.3% faster)
35013 ms : Prevent Clang from unrolling setup/cleanup loops in aligned vectorized sieving (<1% faster)
34585 ms : Add bit masks for 10-rem div tests (~1.2% faster)
33726 ms : Decrease vector sieve threshold to .5% (~2% faster)
33623 ms : Simplify sieve density checks and update_sieve_offsets_cache() (<1% faster)
33581 ms : Save instructions and uops in 16-rem div tests (<1% faster)
33469 ms : Add separate density thresholds for aligned vs unaligned vector sieving (<1% faster)
