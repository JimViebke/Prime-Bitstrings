#pragma once

/*
What is the relative value of a div test? That is, how often does a given test "hit" by discovering that a given number is composite?

Normally, this would be the reciprocal of the prime used, because 1/n of all numbers are divisible by n.

However, tests performed before div testing disproportionately affect which numbers are subject to div tests. Further, running div tests in a given order also affects the relative value of each test.

Therefore, to better determine the order-independent value of each test, we count how many times each one hits during a custom build, in which we run through the whole list instead of breaking when a composite is detected.

The results of a run are pasted below, and can be consumed during compilation as one of the heuristics used to order the div tests.



As an alternative to this, we could count hits during run time, and periodically use them to re-order the tests. This would be adaptable and remove the dependency on hardcoded counts, but we already know that generating these counts requires substantial overhead.
*/

#include <array>

#include "types.hpp"
#include "../math/math.hpp"

namespace mbp::div_test
{
	namespace detail
	{
		struct record
		{
			uint16_t base, prime;
			uint32_t hits;
		};

		constexpr std::array<record, 225> records{
			record{ 3, 5, 113538731 },
			{ 4, 7, 74522522 },
			{ 3, 7, 53889385 },
			{ 5, 7, 52373394 },
			{ 5, 13, 25944762 },
			{ 8, 13, 25931531 },
			{ 4, 17, 24311935 },
			{ 3, 11, 23754715 },
			{ 4, 11, 18958420 },
			{ 5, 11, 15797363 },
			{ 6, 11, 14017628 },
			{ 7, 11, 12038300 },
			{ 9, 11, 10518227 },
			{ 8, 11, 9781935 },
			{ 3, 13, 9045815 },
			{ 4, 13, 8075326 },
			{ 9, 13, 7802977 },
			{ 10, 13, 6693365 },
			{ 6, 13, 4763365 },
			{ 7, 13, 4618584 },
			{ 11, 13, 4360263 },
			{ 9, 17, 2961556 },
			{ 6, 17, 2773809 },
			{ 12, 17, 2607753 },
			{ 3, 17, 2353176 },
			{ 8, 17, 2323002 },
			{ 12, 19, 2295556 },
			{ 12, 29, 2168000 },
			{ 7, 17, 2021995 },
			{ 8, 19, 1876841 },
			{ 10, 17, 1784284 },
			{ 5, 17, 1601702 },
			{ 11, 17, 1463217 },
			{ 6, 37, 1358195 },
			{ 5, 19, 1226744 },
			{ 9, 19, 1143919 },
			{ 3, 19, 1068087 },
			{ 4, 19, 1014372 },
			{ 6, 19, 954928 },
			{ 10, 19, 892830 },
			{ 11, 19, 821168 },
			{ 7, 19, 811103 },
			{ 9, 23, 638040 },
			{ 11, 23, 609431 },
			{ 6, 23, 584579 },
			{ 8, 23, 559807 },
			{ 3, 23, 531584 },
			{ 10, 23, 509527 },
			{ 7, 23, 487407 },
			{ 12, 23, 466306 },
			{ 4, 23, 444400 },
			{ 5, 23, 425881 },
			{ 9, 29, 323879 },
			{ 5, 29, 312439 },
			{ 6, 29, 300256 },
			{ 4, 31, 295988 },
			{ 4, 29, 276524 },
			{ 7, 29, 268009 },
			{ 8, 31, 262325 },
			{ 3, 29, 252342 },
			{ 8, 29, 245180 },
			{ 10, 29, 236179 },
			{ 11, 29, 228475 },
			{ 7, 31, 206497 },
			{ 9, 31, 198236 },
			{ 10, 31, 192693 },
			{ 12, 31, 186716 },
			{ 3, 31, 177925 },
			{ 11, 31, 171006 },
			{ 4, 41, 164502 },
			{ 10, 41, 164209 },
			{ 3, 37, 134130 },
			{ 9, 37, 128200 },
			{ 12, 37, 124384 },
			{ 9, 41, 124238 },
			{ 5, 37, 120684 },
			{ 7, 37, 117113 },
			{ 4, 37, 112763 },
			{ 8, 37, 106432 },
			{ 8, 41, 95197 },
			{ 6, 41, 94046 },
			{ 5, 41, 91078 },
			{ 7, 41, 88695 },
			{ 11, 41, 86275 },
			{ 9, 61, 85114 },
			{ 8, 43, 82951 },
			{ 12, 41, 80510 },
			{ 4, 43, 72311 },
			{ 3, 41, 72035 },
			{ 11, 43, 70954 },
			{ 12, 43, 68908 },
			{ 10, 43, 67264 },
			{ 5, 43, 64987 },
			{ 3, 43, 63392 },
			{ 9, 43, 61232 },
			{ 8, 53, 56364 },
			{ 5, 53, 53922 },
			{ 12, 47, 52905 },
			{ 12, 53, 51876 },
			{ 11, 47, 51440 },
			{ 10, 47, 50404 },
			{ 3, 53, 49889 },
			{ 3, 47, 49046 },
			{ 5, 47, 47580 },
			{ 6, 47, 46286 },
			{ 9, 47, 46069 },
			{ 5, 71, 45617 },
			{ 8, 47, 43852 },
			{ 3, 61, 42467 },
			{ 7, 47, 42316 },
			{ 4, 47, 40713 },
			{ 8, 59, 36272 },
			{ 10, 59, 34493 },
			{ 6, 31, 34008 },
			{ 11, 59, 33934 },
			{ 6, 59, 33047 },
			{ 11, 53, 32498 },
			{ 9, 53, 32302 },
			{ 10, 53, 31174 },
			{ 6, 53, 30650 },
			{ 10, 61, 30325 },
			{ 4, 53, 29881 },
			{ 7, 53, 29255 },
			{ 7, 61, 28173 },
			{ 6, 61, 26803 },
			{ 4, 59, 25952 },
			{ 7, 59, 25100 },
			{ 9, 59, 24297 },
			{ 5, 59, 24054 },
			{ 12, 59, 23200 },
			{ 3, 59, 23016 },
			{ 4, 61, 22556 },
			{ 12, 61, 22223 },
			{ 8, 61, 21608 },
			{ 5, 61, 21117 },
			{ 3, 67, 18980 },
			{ 10, 73, 18540 },
			{ 6, 101, 18398 },
			{ 5, 31, 18348 },
			{ 8, 67, 17967 },
			{ 9, 67, 17872 },
			{ 4, 73, 17691 },
			{ 6, 67, 16982 },
			{ 4, 67, 16940 },
			{ 5, 67, 16594 },
			{ 10, 67, 16404 },
			{ 6, 71, 15217 },
			{ 3, 71, 14946 },
			{ 12, 71, 14558 },
			{ 8, 71, 14410 },
			{ 10, 71, 14101 },
			{ 9, 71, 14051 },
			{ 4, 71, 13697 },
			{ 7, 73, 13380 },
			{ 12, 73, 12935 },
			{ 6, 73, 12788 },
			{ 4, 79, 11705 },
			{ 10, 79, 11668 },
			{ 9, 79, 11399 },
			{ 12, 79, 11055 },
			{ 8, 79, 10827 },
			{ 11, 79, 10644 },
			{ 5, 79, 10555 },
			{ 7, 83, 10152 },
			{ 11, 83, 9948 },
			{ 12, 83, 9803 },
			{ 3, 83, 9695 },
			{ 11, 37, 9582 },
			{ 10, 83, 9542 },
			{ 9, 83, 9307 },
			{ 4, 83, 9119 },
			{ 9, 89, 8407 },
			{ 5, 89, 8211 },
			{ 10, 89, 8032 },
			{ 7, 103, 7996 },
			{ 11, 89, 7926 },
			{ 8, 89, 7857 },
			{ 4, 89, 7630 },
			{ 4, 103, 7545 },
			{ 12, 89, 7420 },
			{ 9, 107, 7229 },
			{ 11, 107, 7037 },
			{ 12, 109, 6906 },
			{ 4, 97, 6875 },
			{ 10, 107, 6770 },
			{ 3, 107, 6691 },
			{ 11, 97, 6602 },
			{ 12, 107, 6513 },
			{ 4, 107, 6439 },
			{ 3, 97, 6399 },
			{ 9, 103, 6195 },
			{ 9, 113, 6184 },
			{ 9, 97, 6117 },
			{ 5, 101, 6110 },
			{ 3, 73, 6050 },
			{ 12, 97, 5995 },
			{ 8, 103, 5822 },
			{ 10, 103, 5791 },
			{ 3, 103, 5769 },
			{ 11, 113, 5710 },
			{ 9, 101, 5602 },
			{ 7, 113, 5485 },
			{ 8, 97, 5476 },
			{ 4, 109, 5384 },
			{ 4, 113, 5210 },
			{ 4, 101, 5161 },
			{ 3, 109, 5039 },
			{ 5, 109, 4818 },
			{ 7, 109, 4803 },
			{ 10, 37, 4762 },
			{ 8, 113, 4659 },
			{ 9, 109, 4612 },
			{ 9, 127, 4418 },
			{ 8, 127, 4300 },
			{ 4, 127, 4296 },
			{ 11, 127, 4200 },
			{ 10, 127, 3985 },
			{ 5, 127, 3964 },
			{ 7, 43, 3556 },
			{ 11, 61, 3538 },
			{ 8, 109, 3445 },
			{ 6, 97, 2605 },
			{ 6, 43, 2226 },
			{ 10, 101, 214 },
			{ 8, 73, 132 }
		};
	}

	consteval uint32_t cached_hitcount_for(const auto base, const auto prime)
	{
		// Kind of icky compile-time linear search
		for (const auto& r : detail::records)
		{
			if (r.base == base && r.prime == prime)
			{
				return r.hits;
			}
		}

		return uint32_t(-1);
	}

}
